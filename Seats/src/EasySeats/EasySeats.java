package EasySeats;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JOptionPane;

/*
 * EasySeats GUI is an attempt to streamline and make the process of multi-seat
 * computing on Linux distributions easier.  Currently, an array of arrays is
 * used, the second array consisting of four slots:
 *
 * 1) Device address
 * 2) Device name
 * 3) Device position
 * 4) Device seat
 *
 */

public class EasySeats extends javax.swing.JFrame
{
    ArrayList seatZeroStatus = new ArrayList();
    ArrayList seatOneStatus = new ArrayList();
    
    //Array of Arrays
    String[][] easySeats;
    
    DefaultListModel allDevicesModel = new DefaultListModel();
    DefaultListModel seatOneModel = new DefaultListModel();
    
    //Make systemd available everywhere
    sdAccess systemd = new sdAccess();
    
    public EasySeats()
    {
        initComponents();
        
        addButtonSeatOne.setVisible(false);
        removeButtonSeatOne.setVisible(false);
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new EasySeats().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        getDevicesButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusResult = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        addButtonSeatOne = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        removeButtonSeatOne = new javax.swing.JButton();
        seatSelectDropDown = new javax.swing.JComboBox();
        assignButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        MenuExit = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        MenuGetSystemDevices = new javax.swing.JMenuItem();
        MenuAddSeat = new javax.swing.JMenuItem();
        MenuRemoveSeat = new javax.swing.JMenuItem();
        MenuClearAllSeats = new javax.swing.JMenuItem();
        MenuShutdownControl = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        getDevicesButton.setText("Get system devices");
        getDevicesButton.setToolTipText("");
        getDevicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDevicesButtonActionPerformed(evt);
            }
        });

        statusResult.setColumns(20);
        statusResult.setRows(5);
        jScrollPane2.setViewportView(statusResult);

        clearButton.setText("Clear status");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(getDevicesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getDevicesButton)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        tabbedPane.addTab("Seat0 status", jPanel2);

        jScrollPane1.setViewportView(jList1);

        addButtonSeatOne.setText("Add");
        addButtonSeatOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonSeatOneActionPerformed(evt);
            }
        });

        jScrollPane3.setInheritsPopupMenu(true);

        jScrollPane3.setViewportView(jList2);

        removeButtonSeatOne.setText("Remove");
        removeButtonSeatOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonSeatOneActionPerformed(evt);
            }
        });

        seatSelectDropDown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "seat1" }));
        seatSelectDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatSelectDropDownActionPerformed(evt);
            }
        });

        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(seatSelectDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeButtonSeatOne, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(assignButton))
                            .addComponent(addButtonSeatOne, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(308, 308, 308)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(seatSelectDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(addButtonSeatOne)
                                .addGap(18, 18, 18)
                                .addComponent(removeButtonSeatOne)
                                .addGap(86, 86, 86)
                                .addComponent(assignButton)
                                .addGap(0, 95, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );

        tabbedPane.addTab("Multi pci-e cards", null, jPanel1, "");

        fileMenu.setText("File");

        MenuExit.setText("Exit");
        MenuExit.setToolTipText("");
        MenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuExitActionPerformed(evt);
            }
        });
        fileMenu.add(MenuExit);

        jMenuBar1.add(fileMenu);

        optionsMenu.setText("Options");

        MenuGetSystemDevices.setText("Get seat zero");
        MenuGetSystemDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGetSystemDevicesActionPerformed(evt);
            }
        });
        optionsMenu.add(MenuGetSystemDevices);

        MenuAddSeat.setText("New seat");
        MenuAddSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAddSeatActionPerformed(evt);
            }
        });
        optionsMenu.add(MenuAddSeat);

        MenuRemoveSeat.setText("Remove last seat");
        MenuRemoveSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRemoveSeatActionPerformed(evt);
            }
        });
        optionsMenu.add(MenuRemoveSeat);

        MenuClearAllSeats.setText("Clear all seats");
        MenuClearAllSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuClearAllSeatsActionPerformed(evt);
            }
        });
        optionsMenu.add(MenuClearAllSeats);

        MenuShutdownControl.setText("Reboot control");
        MenuShutdownControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShutdownControlActionPerformed(evt);
            }
        });
        optionsMenu.add(MenuShutdownControl);

        jMenuBar1.add(optionsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tabbedPane.getAccessibleContext().setAccessibleName("Multi-card");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getDevicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDevicesButtonActionPerformed
        getDevices();
    }//GEN-LAST:event_getDevicesButtonActionPerformed
    
    private void getDevices()
    {
        addButtonSeatOne.setVisible(true);
        removeButtonSeatOne.setVisible(true);
        
        parssystemdVer();
        
        //Create arrays
        easySeats = new String[seatZeroStatus.size() / 2][4];
        
        populateDevArray();
        
        allDevicesModel.removeAllElements();
        
        addDevsToFirstList();
        
        resetDrop();
    }
    
    private void addDevsToFirstList()
    {
        //Adds dev names only to the first control element
        for(int i = 0; i < easySeats.length; i++)
        {
            allDevicesModel.addElement(easySeats[i][1]);
        }
        
        jList1.setModel(allDevicesModel);
    }
    
    private void MenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_MenuExitActionPerformed
        
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        allDevicesModel.removeAllElements();
        seatOneModel.removeAllElements();
        statusResult.setText(null);
        addButtonSeatOne.setVisible(false);
        removeButtonSeatOne.setVisible(false);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        int comboItemPosition = seatSelectDropDown.getSelectedIndex() + 1;
        
        StringBuilder deviceStringList = new StringBuilder();
        
        for(int i = 0 ; i < easySeats.length; i++)
        {
            int bitHolder = Integer.parseInt(easySeats[i][3]);
            
            if (bitHolder == comboItemPosition)
            {
                //Use stringbuilder to create a single long string consisting of several devices
                deviceStringList.append(easySeats[i][0]);
                
                //Append an empty space after the device found to make way for the next device
                deviceStringList.append(" ");
            }
        }
        
        systemd.loginctlSingleSeat(deviceStringList.toString(), comboItemPosition, "attach");
    }//GEN-LAST:event_assignButtonActionPerformed
    
    public void resetDrop()
    {
        //How many seats does systemd report
        String[] defaultSeats = systemd.howManySeats();
        
        //How many seat items are in the drop down list
        int dropSize = seatSelectDropDown.getItemCount();
        
        if (dropSize > 2)
        {
            //Adds dev names only to the first control element
            for(int i = dropSize; i < easySeats.length; i--)
            {
                seatSelectDropDown.removeItemAt(i);

                if (i == 1)
                {
                    break;
                }
            }
        }
        
        //List all seats not identified as seat0 in the drop down
        for (String seat: defaultSeats)
        {
            if (!seat.equals("seat0"))
            {
                seatSelectDropDown.addItem(seat);
            }
        }
    }
    
    private void seatSelectDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatSelectDropDownActionPerformed
        String combItem = seatSelectDropDown.getSelectedItem().toString();
        String seatNum = combItem;
        System.out.println(seatNum + " was selected.");
        
        //When the combo box is selected, it should display items for that seat.
        //addDeviceToJlist2();
    }//GEN-LAST:event_seatSelectDropDownActionPerformed
        
    private void removeButtonSeatOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonSeatOneActionPerformed
        int selIndex = jList2.getSelectedIndex();
        String itemName = jList2.getSelectedValue().toString();

        if (selIndex < 0)
        {
            return;
        }

        //Need to determine the device's index before I can change the bit.
        String temp[] = returnDevice(itemName);

        changeDevSeatBit(Integer.parseInt(temp[2]), 0);

        seatOneModel.removeElementAt(selIndex);
        
        for(int i = 0 ; i < easySeats.length; i++)
        {
            int bitHolder = Integer.parseInt(easySeats[i][3]);

            //Any time the bitholder value equals 2, remove it from the seat.
            if (bitHolder == 2 && temp[2] == easySeats[i][2])
            {
                seatOneModel.removeElement(easySeats[i][1]);
                allDevicesModel.addElement(easySeats[i][1]);
            }
        }

        allDevicesModel.removeAllElements();
        addDevsToFirstList();
        jList2.setModel(seatOneModel);
    }//GEN-LAST:event_removeButtonSeatOneActionPerformed

    private void addButtonSeatOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonSeatOneActionPerformed
        addDeviceToJlist2();
    }//GEN-LAST:event_addButtonSeatOneActionPerformed
    
    private void addDeviceToJlist2()
    {
        int listIndex = jList1.getSelectedIndex();
        String itemName = jList1.getSelectedValue().toString();
        
        String combItem = seatSelectDropDown.getSelectedItem().toString();
        int comboItemLen = combItem.length();
        int selIndex = Integer.parseInt(combItem.substring(comboItemLen - 1, comboItemLen));

        if (listIndex < 0)
        {
            return;
        }
        
        String temp[] = returnDevice(itemName);

        allDevicesModel.removeElementAt(listIndex);

        //This value will always be zero unless the stored index is accessed instead of the jlist index.
        changeDevSeatBit(Integer.parseInt(temp[2]), selIndex);

        //Seat model has to be emptied, otherwise repeat values will be added.
        seatOneModel.removeAllElements();

        for(int i = 0; i < easySeats.length; i++)
        {
            int bitHolder = Integer.parseInt(easySeats[i][3]);

            //Any time the bitholder value equals 1, add it to the model.
            if (bitHolder == selIndex)
            {
                seatOneModel.addElement(easySeats[i][1]);
            }
        }

        jList2.setModel(seatOneModel);
    }
    
    private void MenuClearAllSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuClearAllSeatsActionPerformed
        systemd.clearAllSeats();
    }//GEN-LAST:event_MenuClearAllSeatsActionPerformed

    private void MenuShutdownControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuShutdownControlActionPerformed
        shutdownControl policyRule = new shutdownControl();
        policyRule.shutdownFile();
    }//GEN-LAST:event_MenuShutdownControlActionPerformed

    private void MenuGetSystemDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGetSystemDevicesActionPerformed
        getDevices();
    }//GEN-LAST:event_MenuGetSystemDevicesActionPerformed

    private void MenuAddSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAddSeatActionPerformed
        int dropCount = seatSelectDropDown.getItemCount() + 1;
        String newSeatName = "seat" + dropCount;
        
        int choice = JOptionPane.showConfirmDialog(null,
                "Would you like to add another seat: " + newSeatName
                , "New seat", JOptionPane.YES_NO_OPTION);
        
        if (choice == JOptionPane.YES_OPTION)
        {
            seatSelectDropDown.addItem(newSeatName);
        }
    }//GEN-LAST:event_MenuAddSeatActionPerformed

    private void MenuRemoveSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRemoveSeatActionPerformed
        /*
        * Method will remove the item from the drop down
        * list only, or terminate the corresponding seat
        *
        */
        
        int dropCount = seatSelectDropDown.getItemCount();
        int dropSize = seatSelectDropDown.getItemCount() - 1;
        String seatName = (String) seatSelectDropDown.getItemAt(dropSize);
        
        int choice = JOptionPane.showConfirmDialog(null,
                "Would you like to remove the last seat?  " + seatName
                , "Seat removal", JOptionPane.YES_NO_OPTION);
        
        String currentSeats[] = systemd.howManySeats();
        
        //Seat 1 should always be an option and not removable
        if (dropCount > 1 && choice == JOptionPane.YES_OPTION)
        {
            for(int i = 0; i < currentSeats.length; i++)
            {
                String line = currentSeats[i];
		if(seatName.equals(line))
                {
                    systemd.loginctlSingleSeat("", dropCount, "terminate-seat");
                }
            }
            
            seatSelectDropDown.removeItemAt(dropSize);
        }
    }//GEN-LAST:event_MenuRemoveSeatActionPerformed
    
    public String[] returnDevice(String searchString)
    {
        //Method searches the name to find the address
        String[] stringOne = {"", "", ""};
        String stringTwo = "";
        
        for(int i = 0; i < easySeats.length; i++)
        {
            stringTwo = easySeats[i][1];
            
            if (stringTwo.contains(searchString))
            {
                //address
                stringOne[0] = easySeats[i][0];
                
                //name
                stringOne[1] = stringTwo;
                
                //index
                stringOne[2] = easySeats[i][2];
                break;
            }
        }
        
        return stringOne;
    }
    
    public void changeDevSeatBit(int searchBit, int selectedSeat)
    {
        for(int i = 0; i < easySeats.length; i++)
        {
            //Will search the first array[x]
            
            int bitHolder = Integer.parseInt(easySeats[i][2]);
                
            if (bitHolder == searchBit)
            {
                //Match the value in the stored array[][x]
                easySeats[searchBit][3] = Integer.toString(selectedSeat);
            }
        }
    }
    
    public void populateSeatZeroStatussystemd()
    {
        statusResult.setText(null);
        seatZeroStatus.clear();
        
        String[] seatResults = systemd.populateSeatZeroStatussystemd();

        //Read each line, put into arraylist
        int counter = 0;
        int loopCntr = 0;
        
        for (int i = 0; i < seatResults.length; i++)
        {
            //Throw out the first three results
            if (loopCntr > 2)
            {
                String holdResult = charCleaner(seatResults[i]);
                seatZeroStatus.add(counter, holdResult);

                counter++;
            }

            loopCntr++;
        }
    }
    
    public void populateSeatZeroStatusTextFile()
    {
        statusResult.setText(null);
        seatZeroStatus.clear();
        String command = "";
        
        try
        {
            String homeDirectory = System.getProperty("user.home");
            command = homeDirectory + "/seatstatus.txt";
        
            System.out.println(homeDirectory + " is the home directory.");
            
            BufferedReader fileLines = new BufferedReader(new FileReader(command));
            
            //results holder variable
            String line;
            
            //Read each line, put into arraylist
            int counter = 0;
            int loopCntr = 0;
            while ((line = fileLines.readLine()) != null)
            {
                //Throw out the first three results
                if (loopCntr > 2)
                {
                    String holdResult = charCleaner(line);
                    seatZeroStatus.add(counter, holdResult);
                    
                    counter++;
                }
                
                loopCntr++;
            }
        }
        catch (FileNotFoundException ex)
        {
            addButtonSeatOne.setVisible(false);
            removeButtonSeatOne.setVisible(false);
            statusResult.append("Your systemd version is too low.   Please upgrade.\n");
            statusResult.append(command + " was not found.\n");
            statusResult.append("Please create the file and save the output of the command:\n");
            statusResult.append("loginctl seat-status seat0\n");
            statusResult.append("Input from that file is supported.\n");
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void populateDevArray()
    {
        int loopCntr = 0;
        int devCounter = 0;
        
        String strHolder = "";
        
        for (Object holder : seatZeroStatus)
        {
            //Convert the object to string value
            strHolder = holder.toString();
            
            if (loopCntr % 2 == 0)
            {
                //Add device address
                easySeats[devCounter][0] = strHolder;
            }
            
            if (loopCntr % 2 != 0)
            {
                //Add device name
                easySeats[devCounter][1] = strHolder;
                
                //Add device position
                easySeats[devCounter][2] = Integer.toString(devCounter);
                
                //Add device seat.  By default, all devices belong to seat zero
                easySeats[devCounter][3] = "0";
                devCounter++;
            }
            
            loopCntr++;
        }
        
        addToTextArea();
    }
    
    public void addToTextArea()
    {
        for(int i = 0; i < easySeats.length; i++)
        {
            //The textarea in the main window should get all items for reference purposes
            statusResult.append(easySeats[i][0] + "\n");
            statusResult.append(easySeats[i][1] + "\n");
        }
    }
    
    public String charCleaner(String line)
    {
        //results holder variable
        int heldStrLen;
        int cutHolder = 0;
        
        String holdToStr = line;
        
        heldStrLen = holdToStr.length();
        
        for(int i = 0; i < heldStrLen; i++)
        {
            char firstChar = holdToStr.charAt(i);
            
            if (firstChar == '[' || firstChar == '/' || Character.isLetter(firstChar))
            {
                cutHolder = i;
                break;
            }
        }

        String holdToSubstr = holdToStr.substring(cutHolder, heldStrLen);
        
        return holdToSubstr;
    }
    
    public void parssystemdVer()
    {
        int sdVer = systemd.getsystemdVer();
        
        if(sdVer >= 236)
        {
            //Read directly from systemd
            populateSeatZeroStatussystemd();
        }
        else
        {
            //Read from a text file instead of from systemd directly
            populateSeatZeroStatusTextFile();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuAddSeat;
    private javax.swing.JMenuItem MenuClearAllSeats;
    private javax.swing.JMenuItem MenuExit;
    private javax.swing.JMenuItem MenuGetSystemDevices;
    private javax.swing.JMenuItem MenuRemoveSeat;
    private javax.swing.JMenuItem MenuShutdownControl;
    private javax.swing.JButton addButtonSeatOne;
    private javax.swing.JButton assignButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton getDevicesButton;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JButton removeButtonSeatOne;
    private javax.swing.JComboBox seatSelectDropDown;
    private javax.swing.JTextArea statusResult;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}