package EasySeats;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import javax.swing.JOptionPane;

/*
 * EasySeats GUI is an attempt to streamline and make the process of multi-seat
 * computing on Linux distributions easier.  Currently, an array of arrays is
 * used, the second array consisting of four slots:
 *
 * 1) Device address
 * 2) Device name
 * 3) Device position
 * 4) Device seat
 *
 */

public class EasySeats extends javax.swing.JFrame
{
    ArrayList seatZeroStatus = new ArrayList();
    ArrayList seatOneStatus = new ArrayList();
    
    //Array of Arrays
    String[][] easySeats;
    
    DefaultListModel allDevicesModel = new DefaultListModel();
    DefaultListModel seatOneModel = new DefaultListModel();
    
    public EasySeats()
    {
        initComponents();
        
        addButtonSeatOne.setVisible(false);
        removeButtonSeatOne.setVisible(false);
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EasySeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new EasySeats().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        getDevicesButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusResult = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        addButtonSeatOne = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        removeButtonSeatOne = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        assignButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MenuClearAllSeats = new javax.swing.JMenuItem();
        MenuShutdownControl = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        getDevicesButton.setText("Get system devices");
        getDevicesButton.setToolTipText("");
        getDevicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDevicesButtonActionPerformed(evt);
            }
        });

        statusResult.setColumns(20);
        statusResult.setRows(5);
        jScrollPane2.setViewportView(statusResult);

        jButton1.setText("Clear status");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(getDevicesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getDevicesButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        tabbedPane.addTab("Seat0 status", jPanel2);

        jScrollPane1.setViewportView(jList1);

        addButtonSeatOne.setText("Add");
        addButtonSeatOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonSeatOneActionPerformed(evt);
            }
        });

        jScrollPane3.setInheritsPopupMenu(true);

        jScrollPane3.setViewportView(jList2);

        removeButtonSeatOne.setText("Remove");
        removeButtonSeatOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonSeatOneActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Easyseat 1", "Easyseat 2", "Easyseat 3", "Easyseat 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeButtonSeatOne, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(assignButton))
                            .addComponent(addButtonSeatOne, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(308, 308, 308)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(addButtonSeatOne)
                                .addGap(18, 18, 18)
                                .addComponent(removeButtonSeatOne)
                                .addGap(86, 86, 86)
                                .addComponent(assignButton)
                                .addGap(0, 95, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );

        tabbedPane.addTab("Multi pci-e cards", null, jPanel1, "");

        jMenu1.setText("File");

        MenuExit.setText("Exit");
        MenuExit.setToolTipText("");
        MenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(MenuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        MenuClearAllSeats.setText("Clear all seats");
        MenuClearAllSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuClearAllSeatsActionPerformed(evt);
            }
        });
        jMenu2.add(MenuClearAllSeats);

        MenuShutdownControl.setText("Reboot control");
        MenuShutdownControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShutdownControlActionPerformed(evt);
            }
        });
        jMenu2.add(MenuShutdownControl);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tabbedPane.getAccessibleContext().setAccessibleName("Multi-card");

        pack();
    }// </editor-fold>                        

    private void getDevicesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        addButtonSeatOne.setVisible(true);
        removeButtonSeatOne.setVisible(true);
        
        getsystemdVer();
        
        //Create arrays
        easySeats = new String[seatZeroStatus.size() / 2][4];
        
        populateDevArray();
        
        allDevicesModel.removeAllElements();
        
        addDevsToFirstList();
    }                                                
    
    private void addDevsToFirstList()
    {
        //Adds dev names only to the first control element
        for(int i = 0; i < easySeats.length; i++)
        {
            allDevicesModel.addElement(easySeats[i][1]);
        }
        
        jList1.setModel(allDevicesModel);
    }
    
    private void MenuExitActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.exit(0);
    }                                        
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        allDevicesModel.removeAllElements();
        seatOneModel.removeAllElements();
        statusResult.setText(null);
        addButtonSeatOne.setVisible(false);
        removeButtonSeatOne.setVisible(false);
    }                                        

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String combItem = jComboBox2.getSelectedItem().toString();
        int comboItemLen = combItem.length();
        int selektedIndex = Integer.parseInt(combItem.substring(comboItemLen - 1, comboItemLen));
        
        StringBuilder deviceStringList = new StringBuilder();
        
        for(int i = 0 ; i < easySeats.length; i++)
        {
            int bitHolder = Integer.parseInt(easySeats[i][3]);
            
            if (bitHolder == selektedIndex)
            {
                //Single device assignment command is called in every loop iteration
                //loginctlInsertItem(easySeats[i][0], selektedIndex);
                
                //Use stringbuilder to create a single long string consisting of several devices
                deviceStringList.append(easySeats[i][0]);
                
                //Append an empty space after the device found to make way for the next device
                deviceStringList.append(" ");
            }
        }
        
        loginctlInsertItem(deviceStringList.toString(), selektedIndex);
    }                                            

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        //When the combo box is selected, it should display items for that seat.

        String combItem = jComboBox2.getSelectedItem().toString();
        System.out.println(combItem + " was selected.");
    }                                          

    private void removeButtonSeatOneActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        int selIndex = jList2.getSelectedIndex();
        String itemName = jList2.getSelectedValue().toString();

        if (selIndex < 0)
        {
            return;
        }

        //Need to determine the device's index before I can change the bit.
        String temp[] = returnDevice(itemName);

        changeDevSeatBit(Integer.parseInt(temp[2]), 0);

        seatOneModel.removeElementAt(selIndex);

        for(int i = 0 ; i < easySeats.length; i++)
        {
            int bitHolder = Integer.parseInt(easySeats[i][3]);

            //Any time the bitholder value equals 2, remove it from the seat.
            if (bitHolder == 2 && temp[2] == easySeats[i][2])
            {
                seatOneModel.removeElement(easySeats[i][1]);
                allDevicesModel.addElement(easySeats[i][1]);
            }
        }

        allDevicesModel.removeAllElements();
        addDevsToFirstList();
        jList2.setModel(seatOneModel);
    }                                                   

    private void addButtonSeatOneActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        int listIndex = jList1.getSelectedIndex();
        String itemName = jList1.getSelectedValue().toString();
        
        String combItem = jComboBox2.getSelectedItem().toString();
        int comboItemLen = combItem.length();
        int selIndex = Integer.parseInt(combItem.substring(comboItemLen - 1, comboItemLen));

        if (listIndex < 0)
        {
            return;
        }

        String temp[] = returnDevice(itemName);

        allDevicesModel.removeElementAt(listIndex);

        //This value will always be zero unless the stored index is accessed instead of the jlist index.
        changeDevSeatBit(Integer.parseInt(temp[2]), selIndex);

        //Seat model has to be emptied, otherwise repeat values will be added.
        seatOneModel.removeAllElements();

        for(int i = 0; i < easySeats.length; i++)
        {
            int bitHolder = Integer.parseInt(easySeats[i][3]);

            //Any time the bitholder value equals 1, add it to the model.
            if (bitHolder == selIndex)
            {
                seatOneModel.addElement(easySeats[i][1]);
            }
        }

        jList2.setModel(seatOneModel);
    }                                                

    private void MenuClearAllSeatsActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        Runtime rt = Runtime.getRuntime();
        
        try
        {
            String[] clearAllSeats = {"/bin/sh", "-c", "loginctl flush-devices"};
            Process proc = rt.exec(clearAllSeats);
            
            System.out.println("The command that was sent was: " + clearAllSeats[2].toString());
            
            proc.waitFor();
        }
        catch (IOException ex) //IOException
        {
            ex.printStackTrace();
        }
        catch (InterruptedException ex) //InterruptedException
        {
            ex.printStackTrace();
        }
    }                                                 

    private void MenuShutdownControlActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        //Create the control for a group shutdown and reboot policy
        
        String fileLocation = "/etc/polkit-1/rules.d/20-prevent-shutdown.rules";
        File thisIsTheFile = new File(fileLocation);
        
        if(!thisIsTheFile.exists())
        {
            try
            {
                FileOutputStream OutStr;    
                OutStr = new FileOutputStream(thisIsTheFile);
            
                OutputStreamWriter outWrite = new OutputStreamWriter(OutStr);

                Writer writer = new BufferedWriter(outWrite);
                writer.write("polkit.addRule(function(action, subject) {\n");
                writer.write("    if ((action.id == \"org.freedesktop.login1.power-off-multiple-sessions\" ||\n");
                writer.write("         action.id == \"org.freedesktop.login1.reboot-multiple-sessions\") &&\n");
                writer.write("         subject.isInGroup(\"shutdown\")) {\n");
                writer.write("            return subject.active ? polkit.Result.AUTH_ADMIN : polkit.Result.NO;\n");
                writer.write("    }\n");
                writer.write("});");
                writer.close();
                
                System.out.println("The rule was created at: " + fileLocation);
            }
            catch (FileNotFoundException ex) //FileNotFoundException
            {
                JOptionPane.showMessageDialog(rootPane,
                        "Insufficient permissions to create '20-prevent-shutdown.rules' in /etc/polkit-1/rules.d.");
                ex.printStackTrace();
            }
            catch (UnsupportedEncodingException ex) //UnsupportedEncodingException
            {
                ex.printStackTrace();
            }
            catch (IOException ex) //IOException
            {
                ex.printStackTrace();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane,
                    thisIsTheFile + " already exists.");
        }
    }                                                   
    
    public void loginctlInsertItem(String devAddress, int seatNum)
    {
        String seatName = "seat" + Integer.toString(seatNum);
        
        Runtime rt = Runtime.getRuntime();
        
        try
        {
            String[] seatAttach = {"/bin/sh", "-c", "loginctl attach " + seatName + " " + devAddress};
            Process proc = rt.exec(seatAttach);
            
            System.out.println("The command that was sent was: " + seatAttach[2].toString());
            System.out.println("");
            System.out.println("To create a seat, always remember to start with a video card.");
            System.out.println("");
            
            proc.waitFor();
        }
        catch (IOException ex) //IOException
        {
            ex.printStackTrace();
        }
        catch (InterruptedException ex) //InterruptedException
        {
            ex.printStackTrace();
        }
    }
    
    public String[] returnDevice(String searchString)
    {
        //Method searches the name to find the address
        String[] stringOne = {"", "", ""};
        String stringTwo = "";
        
        for(int i = 0; i < easySeats.length; i++)
        {
            stringTwo = easySeats[i][1];
            
            if (stringTwo.contains(searchString))
            {
                //address
                stringOne[0] = easySeats[i][0];
                
                //name
                stringOne[1] = stringTwo;
                
                //index
                stringOne[2] = easySeats[i][2];
                break;
            }
        }
        
        return stringOne;
    }
    
    public void changeDevSeatBit(int searchBit, int selectedSeat)
    {
        for(int i = 0; i < easySeats.length; i++)
        {
            //Will search the first array[x]
            
            int bitHolder = Integer.parseInt(easySeats[i][2]);
                
            if (bitHolder == searchBit)
            {
                //Match the value in the stored array[][x]
                easySeats[searchBit][3] = Integer.toString(selectedSeat);
            }
        }
    }
    
    public void populateSeatZeroStatussystemd()
    {
        statusResult.setText(null);
        seatZeroStatus.clear();
        
        try
        {
            Runtime rt = Runtime.getRuntime();
            
            //Get All Devices from the command line
            String[] seatZeroLoginctl = {"/bin/sh", "-c", "loginctl seat-status seat0"};
            Process proc = rt.exec(seatZeroLoginctl);
            
            BufferedReader results = new BufferedReader(new InputStreamReader(proc.getInputStream(), "UTF8"));
            
            proc.waitFor();
            
            //results holder variable
            String line;
            
            //Read each line, put into arraylist
            int counter = 0;
            int loopCntr = 0;
            while ((line = results.readLine()) != null)
            {
                //Throw out the first three results
                if (loopCntr > 2)
                {
                    String holdResult = charCleaner(line);
                    seatZeroStatus.add(counter, holdResult);
                    
                    counter++;
                }
                
                loopCntr++;
            }
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }
        catch (InterruptedException ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void populateSeatZeroStatusTextFile()
    {
        statusResult.setText(null);
        seatZeroStatus.clear();
        String command = "";
        
        try
        {
            String homeDirectory = System.getProperty("user.home");
            command = homeDirectory + "/seatstatus.txt";
        
            System.out.println(homeDirectory + " is the home directory.");
            
            BufferedReader fileLines = new BufferedReader(new FileReader(command));
            
            //results holder variable
            String line;
            
            //Read each line, put into arraylist
            int counter = 0;
            int loopCntr = 0;
            while ((line = fileLines.readLine()) != null)
            {
                //Throw out the first three results
                if (loopCntr > 2)
                {
                    String holdResult = charCleaner(line);
                    seatZeroStatus.add(counter, holdResult);
                    
                    counter++;
                }
                
                loopCntr++;
            }
        }
        catch (FileNotFoundException ex)
        {
            addButtonSeatOne.setVisible(false);
            removeButtonSeatOne.setVisible(false);
            statusResult.append("Your systemd version is too low.   Please upgrade.\n");
            statusResult.append(command + " was not found.\n");
            statusResult.append("Please create the file and save the output of the command:\n");
            statusResult.append("loginctl seat-status seat0\n");
            statusResult.append("Input from that file is supported.\n");
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }
    }
    
    public void populateDevArray()
    {
        int loopCntr = 0;
        int devCounter = 0;
        
        String strHolder = "";
        
        for (Object holder : seatZeroStatus)
        {
            //Convert the object to string value
            strHolder = holder.toString();
            
            if (loopCntr % 2 == 0)
            {
                //Add device address
                easySeats[devCounter][0] = strHolder;
            }
            
            if (loopCntr % 2 != 0)
            {
                //Add device name
                easySeats[devCounter][1] = strHolder;
                
                //Add device position
                easySeats[devCounter][2] = Integer.toString(devCounter);
                
                //Add device seat.  By default, all devices belong to seat zero
                easySeats[devCounter][3] = "0";
                devCounter++;
            }
            
            loopCntr++;
        }
        
        addToTextArea();
    }
    
    public void addToTextArea()
    {
        for(int i = 0; i < easySeats.length; i++)
        {
            //The textarea in the main window should get all items for reference purposes
            statusResult.append(easySeats[i][0] + "\n");
            statusResult.append(easySeats[i][1] + "\n");
        }
    }
    
    public String charCleaner(String line)
    {
        //results holder variable
        int heldStrLen;
        int cutHolder = 0;
        
        String holdToStr = line;
        
        heldStrLen = holdToStr.length();
        
        for(int i = 0; i < heldStrLen; i++)
        {
            char firstChar = holdToStr.charAt(i);
            
            if (firstChar == '[' || firstChar == '/' || Character.isLetter(firstChar))
            {
                cutHolder = i;
                break;
            }
        }

        String holdToSubstr = holdToStr.substring(cutHolder, heldStrLen);
        
        return holdToSubstr;
    }
    
    public void getsystemdVer()
    {
        
        ArrayList systemdStatus = new ArrayList();
        
        try
        {
            Runtime rt = Runtime.getRuntime();
            
            //Get All Devices from the command line
            String[] systemDResults = {"/bin/sh", "-c", "systemctl --version"};
            Process proc = rt.exec(systemDResults);
            
            BufferedReader results = new BufferedReader(new InputStreamReader(proc.getInputStream(), "UTF8"));
            
            proc.waitFor();
            
            //results holder variable
            String line;
            
            //Read each line, put into arraylist
            while ((line = results.readLine()) != null)
            {
                systemdStatus.add(line);
                System.out.println(line);
            }
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }
        catch (InterruptedException ex)
        {
            ex.printStackTrace();
        }
        
        //Get the version number, convert it to string, then remove all non-numeric data
        String digits = systemdStatus.get(0).toString().replaceAll("[^0-9]", "");
        
        int sdVer = Integer.parseInt(digits);
        
        if(sdVer >= 236)
        {
            //Read directly from systemd
            populateSeatZeroStatussystemd();
        }
        else
        {
            //Read from a text file instead of from systemd directly
            populateSeatZeroStatusTextFile();
        }
    }
    
    public void getPresentVideoCards()
    {
        //Future use
        Runtime vga = Runtime.getRuntime();
        
        String[] findTotalCards = {"/bin/sh", "-c", "lspci | grep VGA"};
        
        //TODO:  Auto-configure based on the amount of PCI Express cards present.
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem MenuClearAllSeats;
    private javax.swing.JMenuItem MenuExit;
    private javax.swing.JMenuItem MenuShutdownControl;
    private javax.swing.JButton addButtonSeatOne;
    private javax.swing.JButton assignButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton getDevicesButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton removeButtonSeatOne;
    private javax.swing.JTextArea statusResult;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration                   
}
